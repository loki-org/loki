// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0

#ts.@alias('substring')
fun (s string) substr(start i32, end i32) string {
	mut res := ''
	new_len := end - start

	#c."res = (char*)malloc((new_len + 1) * sizeof(char));
	strncpy(res, s + start, new_len);
	res[new_len] = '\0';"

	return res
}

#ts.@alias('split')
fun (s string) split(delim string) []string {
	mut res := []string
	mut i := 0
	mut start := 0
	for i < s.length {
		if i + delim.length <= s.length {
			part := s.substr(i, i + delim.length)
			mut is_delim := false
			#c."is_delim = strcmp(part, delim) == 0;"
			if is_delim {
				res.push(s.substr(start, i))
				start = i + delim.length
				i = start
				continue
			}
		}
		i += 1
	}
	res.push(s.substr(start, s.length))
	return res
}

#ts.@alias('startsWith')
fun (s string) starts_with(search string) bool {
	return s.contains_at_offset(search, 0)
}

#ts.@alias('endsWith')
fun (s string) ends_with(search string) bool {
	return s.contains_at_offset(search, s.length - search.length)
}

fun (s string) contains_at_offset(search string, offset i32) bool {
	if search.length > s.length {
		return false
	}

	for i := 0; i < search.length; i += 1 {
		if search[i] != s[offset + i] {
			return false
		}
	}

	return true
}

#ts.@alias('trim')
fun (s string) trim_space() string {
	cutset := ' \t\n'

	mut left := 0
	mut right := s.length - 1
	mut found := true
	for left < s.length && found {
		found = false
		for i := 0; i < cutset.length; i += 1 {
			if s[left] == cutset[i] {
				left += 1
				found = true
				break
			}
		}
	}

	if left == s.length {
		return ''
	}

	found = true
	for right >= 0 && found {
		found = false
		for i := 0; i < cutset.length; i += 1 {
			if s[right] == cutset[i] {
				right -= 1
				found = true
				break
			}
		}
	}
	return s.substr(left, right + 1)
}

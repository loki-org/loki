// SPDX-FileCopyrightText: 2024-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0

const LOKI_HEADER = ' Generated by Loki (https://github.com/loki-org/loki). Do not edit.\n'

class BaseGen {
	comment_sign = '//'
	line_start = true
	indent = -1
	header_out = ''
	out = ''
	footer_out = ''

	constructor() {
		if (this.constructor === BaseGen) {
			throw new Error('Cannot instantiate BaseGen')
		}
	}

	write_indent() {
		if (this.line_start) {
			this.out += '\t'.repeat(this.indent)
			this.line_start = false
		}
	}

	write(s) {
		this.write_indent()
		this.out += s
	}

	writeln(s) {
		this.write_indent()
		this.out += s + '\n'
		this.line_start = true

	}

	gen(ast) {
		this.pre_stage()

		this.header_out = this.line_comment(LOKI_HEADER)

		this.stmts(ast.body)

		this.post_stage()

		return this.header_out + '\n'
			+ this.out + '\n'
			+ this.footer_out + '\n'
	}

	stmts(stmts) {
		this.indent++
		for (const stmt of stmts) {
			this.stmt(stmt)
		}
		this.indent--
	}

	stmt(stmt) {
		switch (stmt.kind) {
			case 'const_decl':
				this.const_decl(stmt)
				break
			default:
				throw new Error(`cannot generate ${stmt.kind}`)
		}
	}

	expr(expr){
		switch (expr.kind) {
			case 'cast_expr':
				this.cast_expr(expr)
				break
			case 'integer':
				this.integer(expr)
				break
			default:
				throw new Error(`cannot generate ${expr.kind}`)
		}

	}

	integer(node) {
		this.write(node.value)
	}

	line_comment(text) {
		return `${this.comment_sign}${text}`
	}

	pre_stage() {
		// Do nothing by default
	}

	post_stage() {
		// Do nothing by default
	}

	const_decl(node) {
		throw new Error('Not implemented')
	}

	cast_expr(node) {
		throw new Error('Not implemented')
	}
}

async function load_backend(backend) {
	try {
		const obj = await import(`./backends/${backend}.js`)
		return new obj.Gen()
	} catch (e) {
		console.error(e)
		process.exit(1)
	}
}

async function gen(ast, backend) {
	const b = await load_backend(backend)
	return b.gen(ast)
}

export { gen, BaseGen }
